# coding: utf-8

"""
    Telstra SMS Messaging API

    The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator. It also allows your application to track the delivery status of both sent and received SMS messages. 

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InboundPollResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, to=None, _from=None, body=None, received_timestamp=None, more_messages=None, message_id=None):
        """
        InboundPollResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'to': 'str',
            '_from': 'str',
            'body': 'str',
            'received_timestamp': 'str',
            'more_messages': 'int',
            'message_id': 'str'
        }

        self.attribute_map = {
            'to': 'to',
            '_from': 'from',
            'body': 'body',
            'received_timestamp': 'receivedTimestamp',
            'more_messages': 'moreMessages',
            'message_id': 'messageId'
        }

        self._to = to
        self.__from = _from
        self._body = body
        self._received_timestamp = received_timestamp
        self._more_messages = more_messages
        self._message_id = message_id

    @property
    def to(self):
        """
        Gets the to of this InboundPollResponse.
        The phone number (recipient) that the message was sent to(in E.164 format).

        :return: The to of this InboundPollResponse.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this InboundPollResponse.
        The phone number (recipient) that the message was sent to(in E.164 format).

        :param to: The to of this InboundPollResponse.
        :type: str
        """

        self._to = to

    @property
    def _from(self):
        """
        Gets the _from of this InboundPollResponse.
        The phone number (sender) that the message was sent from (in E.164 format).

        :return: The _from of this InboundPollResponse.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this InboundPollResponse.
        The phone number (sender) that the message was sent from (in E.164 format).

        :param _from: The _from of this InboundPollResponse.
        :type: str
        """

        self.__from = _from

    @property
    def body(self):
        """
        Gets the body of this InboundPollResponse.
        Text body of the message that was sent

        :return: The body of this InboundPollResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this InboundPollResponse.
        Text body of the message that was sent

        :param body: The body of this InboundPollResponse.
        :type: str
        """

        self._body = body

    @property
    def received_timestamp(self):
        """
        Gets the received_timestamp of this InboundPollResponse.
        The date and time when the message was recieved by recipient.

        :return: The received_timestamp of this InboundPollResponse.
        :rtype: str
        """
        return self._received_timestamp

    @received_timestamp.setter
    def received_timestamp(self, received_timestamp):
        """
        Sets the received_timestamp of this InboundPollResponse.
        The date and time when the message was recieved by recipient.

        :param received_timestamp: The received_timestamp of this InboundPollResponse.
        :type: str
        """

        self._received_timestamp = received_timestamp

    @property
    def more_messages(self):
        """
        Gets the more_messages of this InboundPollResponse.
        Indicates if there are more messages that can be polled from the server. 0=No more messages available. Anything else indicates there are more messages on the server.

        :return: The more_messages of this InboundPollResponse.
        :rtype: int
        """
        return self._more_messages

    @more_messages.setter
    def more_messages(self, more_messages):
        """
        Sets the more_messages of this InboundPollResponse.
        Indicates if there are more messages that can be polled from the server. 0=No more messages available. Anything else indicates there are more messages on the server.

        :param more_messages: The more_messages of this InboundPollResponse.
        :type: int
        """

        self._more_messages = more_messages

    @property
    def message_id(self):
        """
        Gets the message_id of this InboundPollResponse.
        Optional message ID of the SMS you sent. Use this ID to view the message status or get responses.

        :return: The message_id of this InboundPollResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this InboundPollResponse.
        Optional message ID of the SMS you sent. Use this ID to view the message status or get responses.

        :param message_id: The message_id of this InboundPollResponse.
        :type: str
        """

        self._message_id = message_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InboundPollResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
