# coding: utf-8

"""
    Telstra SMS Messaging API

    The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator. It also allows your application to track the delivery status of both sent and received SMS messages. 

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, to=None, received_timestamp=None, sent_timestamp=None, status=None):
        """
        InlineResponse2001 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'to': 'str',
            'received_timestamp': 'str',
            'sent_timestamp': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'to': 'to',
            'received_timestamp': 'receivedTimestamp',
            'sent_timestamp': 'sentTimestamp',
            'status': 'status'
        }

        self._to = to
        self._received_timestamp = received_timestamp
        self._sent_timestamp = sent_timestamp
        self._status = status

    @property
    def to(self):
        """
        Gets the to of this InlineResponse2001.
        The phone number (recipient) the message was sent to (in E.164 format).

        :return: The to of this InlineResponse2001.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this InlineResponse2001.
        The phone number (recipient) the message was sent to (in E.164 format).

        :param to: The to of this InlineResponse2001.
        :type: str
        """

        self._to = to

    @property
    def received_timestamp(self):
        """
        Gets the received_timestamp of this InlineResponse2001.
        The date and time when the message was recieved by recipient.

        :return: The received_timestamp of this InlineResponse2001.
        :rtype: str
        """
        return self._received_timestamp

    @received_timestamp.setter
    def received_timestamp(self, received_timestamp):
        """
        Sets the received_timestamp of this InlineResponse2001.
        The date and time when the message was recieved by recipient.

        :param received_timestamp: The received_timestamp of this InlineResponse2001.
        :type: str
        """

        self._received_timestamp = received_timestamp

    @property
    def sent_timestamp(self):
        """
        Gets the sent_timestamp of this InlineResponse2001.
        The date and time when the message was sent.

        :return: The sent_timestamp of this InlineResponse2001.
        :rtype: str
        """
        return self._sent_timestamp

    @sent_timestamp.setter
    def sent_timestamp(self, sent_timestamp):
        """
        Sets the sent_timestamp of this InlineResponse2001.
        The date and time when the message was sent.

        :param sent_timestamp: The sent_timestamp of this InlineResponse2001.
        :type: str
        """

        self._sent_timestamp = sent_timestamp

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2001.
        Delivery status of the message

        :return: The status of this InlineResponse2001.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2001.
        Delivery status of the message

        :param status: The status of this InlineResponse2001.
        :type: str
        """
        allowed_values = ["PEND", "SENT", "DELIVRD", "EXPIRED", "DELETED", "UNDVBL", "REJECTED", "READ"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
