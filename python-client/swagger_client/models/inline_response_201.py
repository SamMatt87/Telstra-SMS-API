# coding: utf-8

"""
    Telstra SMS Messaging API

    The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator. It also allows your application to track the delivery status of both sent and received SMS messages. 

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse201(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, to=None, delivery_status=None, description=None, message_id=None, message_type=None, number_segements=None):
        """
        InlineResponse201 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'to': 'str',
            'delivery_status': 'str',
            'description': 'str',
            'message_id': 'str',
            'message_type': 'str',
            'number_segements': 'int'
        }

        self.attribute_map = {
            'to': 'to',
            'delivery_status': 'deliveryStatus',
            'description': 'description',
            'message_id': 'messageId',
            'message_type': 'messageType',
            'number_segements': 'numberSegements'
        }

        self._to = to
        self._delivery_status = delivery_status
        self._description = description
        self._message_id = message_id
        self._message_type = message_type
        self._number_segements = number_segements

    @property
    def to(self):
        """
        Gets the to of this InlineResponse201.
        The mobile phone number (in E.164 format) that the message was sent to.

        :return: The to of this InlineResponse201.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this InlineResponse201.
        The mobile phone number (in E.164 format) that the message was sent to.

        :param to: The to of this InlineResponse201.
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def delivery_status(self):
        """
        Gets the delivery_status of this InlineResponse201.
        The current status of the message for this address. Possible values are; 'DeliveryImpossible' – The message has been rejected and cannot be delivered. see the description field. 'MessageWaiting' – The message will be delivered as soon as possible.

        :return: The delivery_status of this InlineResponse201.
        :rtype: str
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """
        Sets the delivery_status of this InlineResponse201.
        The current status of the message for this address. Possible values are; 'DeliveryImpossible' – The message has been rejected and cannot be delivered. see the description field. 'MessageWaiting' – The message will be delivered as soon as possible.

        :param delivery_status: The delivery_status of this InlineResponse201.
        :type: str
        """
        if delivery_status is None:
            raise ValueError("Invalid value for `delivery_status`, must not be `None`")

        self._delivery_status = delivery_status

    @property
    def description(self):
        """
        Gets the description of this InlineResponse201.
        This is a string that describes why a message could not be delivered.

        :return: The description of this InlineResponse201.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse201.
        This is a string that describes why a message could not be delivered.

        :param description: The description of this InlineResponse201.
        :type: str
        """

        self._description = description

    @property
    def message_id(self):
        """
        Gets the message_id of this InlineResponse201.
        The message ID of the SMS that was sent. Use this ID to view the message status or to receive get responses.

        :return: The message_id of this InlineResponse201.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this InlineResponse201.
        The message ID of the SMS that was sent. Use this ID to view the message status or to receive get responses.

        :param message_id: The message_id of this InlineResponse201.
        :type: str
        """

        self._message_id = message_id

    @property
    def message_type(self):
        """
        Gets the message_type of this InlineResponse201.
        A string that identifys the transport mechanism that was selected for delivering the the message.

        :return: The message_type of this InlineResponse201.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this InlineResponse201.
        A string that identifys the transport mechanism that was selected for delivering the the message.

        :param message_type: The message_type of this InlineResponse201.
        :type: str
        """
        allowed_values = ["SMS", "MMS", "RCS"]
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def number_segements(self):
        """
        Gets the number_segements of this InlineResponse201.
        An integer between 0 and 65536 that indicates the number of chargable segments in the message. For SMS this will be the number of segments the message had to be divided into (after convertion) to a character set understood by the SMS network.

        :return: The number_segements of this InlineResponse201.
        :rtype: int
        """
        return self._number_segements

    @number_segements.setter
    def number_segements(self, number_segements):
        """
        Sets the number_segements of this InlineResponse201.
        An integer between 0 and 65536 that indicates the number of chargable segments in the message. For SMS this will be the number of segments the message had to be divided into (after convertion) to a character set understood by the SMS network.

        :param number_segements: The number_segements of this InlineResponse201.
        :type: int
        """

        self._number_segements = number_segements

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
